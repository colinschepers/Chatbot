{"version":3,"sources":["static/BackendService.js","static/Chatbot.jsx","static/CMS.jsx","static/Statistics.jsx","static/Configuration.jsx","App.jsx","serviceWorker.js","index.js"],"names":["BackendService","this","baseUrl","callback","doRequest","delayInMilliseconds","message","url","start","Date","getTime","fetch","credentials","then","res","json","result","end","setTimeout","backendService","Avatar","className","Component","MessageBox","props","appearance","MessagesContainer","scrollToBottom","el","refs","scroll","scrollTop","scrollHeight","createBotMessages","bind","messages","map","index","key","ref","MessageTextBoxContainer","id","placeholder","value","onChange","onKeyPress","_handleKeyPress","SendButton","onClick","handleClick","Chatbot","_isMounted","state","addMessageBox","e","getHistory","setState","getWelcomeMessage","current_message","target","enter","sendMessage","DataItem","response","DataContainer","scrollToTop","createDataItems","data","item","normalized_message","FilterTextBoxContainer","filter","RefreshButton","CMS","onFilterChange","loadData","filterWords","toLowerCase","split","filtered_data","every","filterWord","includes","current_filter","getData","Statistics","Configuration","theme","createMuiTheme","palette","primary","deepOrange","secondary","overrides","MuiTab","root","backgroundColor","borderRadius","tab_contents","label","App","handleChange","event","tab","idx","Tab","style","display","selectedTab","AppBar","position","color","Tabs","indicatorColor","textColor","variant","getTabs","getTabContent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f36b767a.chunk.js","sourcesContent":["export default class BackendService {\r\n  constructor() {\r\n    this.baseUrl = \"http://localhost:5000\";\r\n  }\r\n\r\n  getHistory(callback) {\r\n    this.doRequest(this.baseUrl + \"/chatbot/history\", callback);\r\n  }\r\n\r\n  getWelcomeMessage(callback, delayInMilliseconds) {\r\n    this.doRequest(this.baseUrl + \"/chatbot/welcome\", callback, delayInMilliseconds);\r\n  }\r\n\r\n  sendMessage(message, callback, delayInMilliseconds) {\r\n    let url = this.baseUrl + \"/chatbot/get?\" + (message ? (\"message=\" + message) : \"\");\r\n    this.doRequest(url, callback, delayInMilliseconds);\r\n  }\r\n\r\n  getData(callback) {\r\n    this.doRequest(this.baseUrl + \"/chatbot/data\", callback);\r\n  }\r\n\r\n  doRequest(url, callback, delayInMilliseconds = 0) {\r\n    let start = new Date().getTime();\r\n    fetch(url, {\r\n        credentials: \"include\"\r\n      })\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          // console.log('url => ' + result);\r\n          let end = new Date().getTime();\r\n          let elapsed = end - start;\r\n          setTimeout(function () {\r\n            callback(result);\r\n          }, delayInMilliseconds - elapsed);\r\n        }\r\n      );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport BackendService from './BackendService.js';\r\nimport './css/chatbot.css';\r\n\r\nvar backendService = new BackendService();\r\n\r\nclass Avatar extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"avatar\" />\r\n        );\r\n    }\r\n}\r\n\r\nclass MessageBox extends Component {\r\n    render() {\r\n        return (\r\n            <li className={`message ${this.props.appearance} appeared`}>\r\n                <Avatar></Avatar>\r\n                <div className=\"text_wrapper\">\r\n                    <div className=\"text\">{this.props.message}</div>\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nclass MessagesContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.createBotMessages = this.createBotMessages.bind(this);\r\n    }\r\n\r\n    scrollToBottom = () => {\r\n        var el = this.refs.scroll;\r\n        el.scrollTop = el.scrollHeight;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    createBotMessages() {\r\n        return this.props.messages.map((message, index) =>\r\n            <MessageBox key={index} message={message[\"message\"]} appearance={message[\"isbotmessage\"] ? \"left\" : \"right\"} />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ul className=\"messages\" ref=\"scroll\">\r\n                {this.createBotMessages()}\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nclass MessageTextBoxContainer extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"message_input_wrapper\">\r\n                <input id=\"msg_input\" className=\"message_input\" placeholder=\"Type your message here...\" value={this.props.message} onChange={this.props.onChange} onKeyPress={this.props._handleKeyPress} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass SendButton extends Component {\r\n    render() {\r\n        return (<div className=\"send_message\" onClick={this.props.handleClick}>\r\n            <div className=\"text\">send</div>\r\n        </div>);\r\n    }\r\n}\r\n\r\nclass Chatbot extends Component {\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \"messages\": [], \"current_message\": \"\" }\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this._handleKeyPress = this._handleKeyPress.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.addMessageBox = this.addMessageBox.bind(this);\r\n    }\r\n\r\n    handleClick() {\r\n        this.addMessageBox();\r\n    }\r\n\r\n    _handleKeyPress(e) {\r\n        this.addMessageBox(e.key === \"Enter\")\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n        backendService.getHistory((result) => {\r\n            if (this._isMounted) {\r\n                this.setState({\r\n                    messages: result\r\n                });\r\n                backendService.getWelcomeMessage((result) => {\r\n                    if (this._isMounted) {\r\n                        this.setState({\r\n                            messages: [...this.state.messages, result]\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({ current_message: e.target.value });\r\n    }\r\n\r\n    addMessageBox(enter = true) {\r\n        let messages = this.state.messages;\r\n        let current_message = this.state.current_message;\r\n        if (current_message && enter) {\r\n            messages = [...messages, { \"message\": current_message }];\r\n\r\n            backendService.sendMessage(current_message, (result) => {\r\n                this.setState({\r\n                    messages: [...this.state.messages, result]\r\n                });\r\n            });\r\n\r\n            current_message = \"\"\r\n        }\r\n        this.setState({\r\n            current_message: current_message,\r\n            messages\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chat_window\">\r\n                <MessagesContainer messages={this.state.messages}></MessagesContainer>\r\n                <div className=\"bottom_wrapper clearfix\">\r\n                    <MessageTextBoxContainer\r\n                        _handleKeyPress={this._handleKeyPress}\r\n                        onChange={this.onChange}\r\n                        message={this.state.current_message}></MessageTextBoxContainer>\r\n                    <SendButton handleClick={this.handleClick}></SendButton>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Chatbot;","import React, { Component } from 'react';\r\nimport BackendService from './BackendService.js';\r\nimport './css/cms.css';\r\n\r\nvar backendService = new BackendService();\r\n\r\nclass DataItem extends Component {\r\n    render() {\r\n        return (\r\n            <li className=\"data_item appeared\">\r\n                <div className=\"message\" >\r\n                    <div className=\"text\">{this.props.message}</div>\r\n                </div>\r\n                <div className=\"response\" >\r\n                    <div className=\"text\">{this.props.response}</div>\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nclass DataContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.createDataItems = this.createDataItems.bind(this);\r\n    }\r\n\r\n    scrollToTop = () => {\r\n        var el = this.refs.scroll;\r\n        el.scrollTop = 0;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.scrollToTop();\r\n    }\r\n\r\n    createDataItems() {\r\n        return this.props.data.map((item, index) =>\r\n            <DataItem key={index}\r\n                message={item[\"message\"]}\r\n                normalized_message={item[\"normalized_message\"]}\r\n                response={item[\"response\"]} />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ul className=\"data\" ref=\"scroll\">\r\n                {this.createDataItems()}\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nclass FilterTextBoxContainer extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"filter_input_wrapper\">\r\n                <input\r\n                    className=\"filter_input\"\r\n                    placeholder=\"Type here to filter...\"\r\n                    value={this.props.filter}\r\n                    onChange={this.props.onChange} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass RefreshButton extends Component {\r\n    render() {\r\n        return (<div className=\"refresh_button\" onClick={this.props.handleClick}>\r\n            <div className=\"text\">refresh data</div>\r\n        </div>);\r\n    }\r\n}\r\n\r\nclass CMS extends Component {\r\n    _isMounted = true;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \"data\": [], \"filtered_data\": [], \"current_filter\": \"\" }\r\n        this.onFilterChange = this.onFilterChange.bind(this);\r\n        this.loadData = this.loadData.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n        this.loadData();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n    onFilterChange(e) {\r\n        let filter = e.target.value;\r\n        let filterWords = filter.toLowerCase().split(\" \");\r\n        let filtered_data = this.state.data.filter((item) => {\r\n            return filterWords.every(filterWord =>\r\n                item.message.toLowerCase().includes(filterWord)\r\n                || item.normalized_message.toLowerCase().includes(filterWord)\r\n                || item.response.toLowerCase().includes(filterWord)\r\n            );\r\n        });\r\n        this.setState({ filtered_data: filtered_data, current_filter: filter });\r\n    }\r\n\r\n    loadData() {\r\n        backendService.getData((result) => {\r\n            if (this._isMounted) {\r\n                this.setState({\r\n                    data: result,\r\n                    filtered_data: result\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"cms_window\">\r\n                <DataContainer data={this.state.filtered_data}></DataContainer>\r\n                <div className=\"bottom_wrapper clearfix\">\r\n                    <FilterTextBoxContainer\r\n                        onChange={this.onFilterChange}\r\n                        filter={this.state.current_filter}></FilterTextBoxContainer>\r\n                    <RefreshButton handleClick={this.loadData}></RefreshButton>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CMS;","import React, { Component } from 'react';\r\n//import BackendService from './BackendService.js';\r\n\r\n//var backendService = new BackendService();\r\n\r\nclass Statistics extends Component {\r\n    render() {\r\n        return (\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Statistics;","import React, { Component } from 'react';\r\n//import BackendService from './BackendService.js';\r\n\r\n//var backendService = new BackendService();\r\n\r\nclass Configuration extends Component {\r\n    render() {\r\n        return (\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Configuration;","import React, { Component } from 'react';\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\r\nimport deepOrange from '@material-ui/core/colors/deepOrange';\r\nimport Chatbot from './static/Chatbot.jsx';\r\nimport CMS from './static/CMS.jsx';\r\nimport Statistics from './static/Statistics.jsx';\r\nimport Configuration from './static/Configuration.jsx';\r\nimport './App.css';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: deepOrange,\r\n    secondary: deepOrange,\r\n  },\r\n  overrides: {\r\n    MuiTab: {\r\n      root: {\r\n        \"&:hover\": {\r\n          backgroundColor: '#ffda99',\r\n          borderRadius: 15\r\n        }\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nconst tab_contents = [\r\n  <Chatbot label=\"Chatbot\" />,\r\n  <CMS label=\"CMS\" />,\r\n  <Statistics label=\"Statistics\" />,\r\n  <Configuration label=\"Configuration\" />\r\n]\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      \"user_name\": \"Guest\",\r\n      \"selectedTab\": 0\r\n    }\r\n  }\r\n\r\n  handleChange = (event, value) => {\r\n    this.setState({ \"selectedTab\": value });\r\n  };\r\n\r\n  getTabs() {\r\n    return tab_contents.map((tab, idx) => <Tab key={idx} label={tab.props.label} />)\r\n  }\r\n\r\n  getTabContent() {\r\n    return tab_contents.map((tab, idx) =>\r\n      <div key={idx} style={{ display: idx === this.state.selectedTab ? 'block' : 'none' }}>\r\n        {tab}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <MuiThemeProvider theme={theme}>\r\n          <AppBar className=\"appbar\" position=\"static\" color=\"default\">\r\n            <Tabs\r\n              indicatorColor=\"primary\"\r\n              textColor=\"secondary\"\r\n              variant=\"fullWidth\"\r\n              value={this.state.selectedTab}\r\n              onChange={this.handleChange} >\r\n              {this.getTabs()}\r\n            </Tabs>\r\n          </AppBar>\r\n          <div className=\"content\">\r\n            {this.getTabContent()}\r\n          </div>\r\n        </MuiThemeProvider>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render( < App / > , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}